# For documentation see here - https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml
service: uec-dos-integration
frameworkVersion: "3"
configValidationMode: error

provider:
  name: aws
  deploymentMethod: direct
  lambdaHashingVersion: 20201221
  architecture: x86_64
  region: ${env:AWS_REGION}
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    skipPolicySetup: true
    versioning: true
    serverSideEncryption: aws:kms
    sseKMSKeyId: ${env:TERRAFORM_KMS_KEY_ID}
  stackTags:
    BUILD_TIMESTAMP: ${env:VERSION}
    BlueGreenEnvironment: ${env:BLUE_GREEN_ENVIRONMENT}
    DataClassification: ${env:PROJECT_DATA_CLASSIFICATION}
    EnvironmentType: ${env:AWS_ACCOUNT_NAME}
    Owner: ${env:PROJECT_DISTRIBUTION_LIST}
    Product: ${env:PROJECT_ID}
    Profile: ${env:PROFILE}
    Programme: ${env:PROGRAMME}
    Project: ${env:PROJECT_DISPLAY_NAME}
    PublicFacing: "No"
    Service: ${env:PROJECT_ID}
    ServiceCategory: ${env:PROJECT_SERVICE_CATEGORY}
    SharedEnvironment: ${env:SHARED_ENVIRONMENT}
    TagVersion: "2.0"
    Tool: "Serverless Framework deployed by CloudFormation"
  tags:
    BUILD_TIMESTAMP: ${env:VERSION}
    BlueGreenEnvironment: ${env:BLUE_GREEN_ENVIRONMENT}
    DataClassification: ${env:PROJECT_DATA_CLASSIFICATION}
    Environment: ${env:AWS_ACCOUNT_NAME}
    Owner: ${env:PROJECT_DISTRIBUTION_LIST}
    Product: ${env:PROJECT_ID}
    Profile: ${env:PROFILE}
    Programme: ${env:PROGRAMME}
    Project: ${env:PROJECT_DISPLAY_NAME}
    PublicFacing: "No"
    Service: ${env:PROJECT_ID}
    ServiceCategory: ${env:PROJECT_SERVICE_CATEGORY}
    SharedEnvironment: ${env:SHARED_ENVIRONMENT}
    TagVersion: "2.0"
    Tool: "Serverless Framework deployed by CloudFormation"
  environment:
    PROFILE: ${env:PROFILE}
    ENV: ${env:BLUE_GREEN_ENVIRONMENT}
    SHARED_ENVIRONMENT: ${env:SHARED_ENVIRONMENT}
    POWERTOOLS_SERVICE_NAME: ${env:PROGRAMME}-${env:TEAM_ID}-${env:PROFILE}-${sls:stage}
    POWERTOOLS_TRACER_CAPTURE_RESPONSE: true
    POWERTOOLS_TRACER_CAPTURE_ERROR: true
    POWERTOOLS_TRACE_MIDDLEWARES: true
    LOG_LEVEL: ${env:LOG_LEVEL}
    IMAGE_VERSION: ${env:VERSION}
  logs:
    restApi:
      format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":"$context.status","responseLatency":"$context.responseLatency","xrayTraceId":"$context.xrayTraceId","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
  tracing:
    lambda: true
  disableRollback: ${env:SERVERLESS_DISABLE_ROLLBACK}

plugins:
  - serverless-vpc-discovery
  - serverless-plugin-ifelse

custom:
  serverlessIfElse:
    - If: '"${env:AWS_ACCOUNT_NAME}" == "prod"'
      Exclude:
        - functions.dos-db-handler

functions:
  change-event-dlq-handler:
    image: ${env:DOCKER_REGISTRY}/${env:CHANGE_EVENT_DLQ_HANDLER}:${env:VERSION}
    architecture: x86_64
    name: ${env:CHANGE_EVENT_DLQ_HANDLER_LAMBDA_NAME}
    description: ${sls:stage} Change Event DLQ Handler lambda
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_change_event_dlq_handler_role_name}
    environment:
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
    maximumRetryAttempts: 0

  dos-db-handler:
    image: ${env:DOCKER_REGISTRY}/${env:DOS_DB_HANDLER}:${env:VERSION}
    architecture: x86_64
    name: ${env:DOS_DB_HANDLER_LAMBDA_NAME}
    description: ${sls:stage} DoS DB Handler lambda for accessing DoS DB in Non-Live environments
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_dos_db_handler_role_name}
    environment:
      DB_NAME: ${env:DB_NAME}
      DB_PORT: ${env:DB_PORT}
      DB_READ_ONLY_USER_NAME: ${env:DB_READ_ONLY_USER_NAME}
      DB_REPLICA_SECRET_KEY: ${env:DB_REPLICA_SECRET_KEY}
      DB_REPLICA_SECRET_NAME: ${env:DB_REPLICA_SECRET_NAME}
      DB_REPLICA_SERVER: ${env:DB_REPLICA_SERVER}
      DB_SERVER: ${env:DB_SERVER}
      DB_SCHEMA: ${env:DB_SCHEMA}
      DB_SECRET_KEY: ${env:DOS_DEPLOYMENT_SECRETS_PASSWORD_KEY}
      DB_SECRET_NAME: ${env:DOS_DEPLOYMENT_SECRETS}
      DB_READ_AND_WRITE_USER_NAME: ${env:DB_SCHEMA}
    maximumRetryAttempts: 0
    vpcDiscovery:
      vpcName: "${env:AWS_VPC_NAME}"
      subnets:
        - tagKey: Name
          tagValues:
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}a"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}b"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}c"
      securityGroups:
        - tagKey: Name
          tagValues:
            - "${env:TF_VAR_lambda_security_group_name}"

  dos-db-update-dlq-handler:
    image: ${env:DOCKER_REGISTRY}/${env:DOS_DB_UPDATE_DLQ_HANDLER}:${env:VERSION}
    architecture: x86_64
    name: ${env:DOS_DB_UPDATE_DLQ_HANDLER_LAMBDA_NAME}
    description: ${sls:stage} DoS DB Update DLQ Handler lambda
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_dos_db_update_dlq_handler_role_name}
    maximumRetryAttempts: 0

  event-replay:
    image: ${env:DOCKER_REGISTRY}/${env:EVENT_REPLAY}:${env:VERSION}
    architecture: x86_64
    name: ${env:EVENT_REPLAY_LAMBDA_NAME}
    description: ${sls:stage} Event Replay lambda
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_event_replay_role_name}
    environment:
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
      CHANGE_EVENT_SQS_NAME: ${env:TF_VAR_change_event_queue_name}
    maximumRetryAttempts: 0

  ingest-change-event:
    image: ${env:DOCKER_REGISTRY}/${env:INGEST_CHANGE_EVENT}:${env:VERSION}
    architecture: x86_64
    name: ${env:INGEST_CHANGE_EVENT_LAMBDA_NAME}
    description: ${sls:stage} Ingest Change Event lambda
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_ingest_change_event_role_name}
    environment:
      HOLDING_QUEUE_URL: ${env:holding_queue_url}
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
    maximumRetryAttempts: 2

  orchestrator:
    image: ${env:DOCKER_REGISTRY}/${env:ORCHESTRATOR}:${env:VERSION}
    architecture: x86_64
    name: ${env:ORCHESTRATOR_LAMBDA_NAME}
    description: ${sls:stage} Orchestrator
    memorySize: 128
    timeout: 295 # 4 minutes and 55 seconds (should mean max 5 second gap every 5 mins)
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_orchestrator_role_name}
    maximumRetryAttempts: 0
    reservedConcurrency: 1 # ensure only one orchestrator running at a time
    events:
      - schedule: rate(1 minute)
    environment:
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
      CIRCUIT: DOS_DATABASE
      UPDATE_REQUEST_QUEUE_URL: ${env:update_request_queue_url}
      DOS_TRANSACTIONS_PER_SECOND: ${env:DOS_TRANSACTIONS_PER_SECOND}
      SERVICE_SYNC_FUNCTION_NAME: ${env:SERVICE_SYNC_LAMBDA_NAME}
      RUN_FOR: 280
      SLEEP_FOR_WHEN_OPEN: 2

  send-email:
    image: ${env:DOCKER_REGISTRY}/${env:SEND_EMAIL}:${env:VERSION}
    architecture: x86_64
    name: ${env:SEND_EMAIL_LAMBDA_NAME}
    description: ${sls:stage} Send Email lambda
    memorySize: 128
    timeout: 30
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_send_email_role_name}
    environment:
      AWS_ACCOUNT_NAME: ${env:AWS_ACCOUNT_NAME}
      SYSTEM_EMAIL_ADDRESS: ${env:PROJECT_SYSTEM_EMAIL_ADDRESS}
      EMAIL_SECRET_NAME: ${env:PROJECT_DEPLOYMENT_SECRETS}
    maximumRetryAttempts: 2

  service-matcher:
    image: ${env:DOCKER_REGISTRY}/${env:SERVICE_MATCHER}:${env:VERSION}
    architecture: x86_64
    name: ${env:SERVICE_MATCHER_LAMBDA_NAME}
    description: ${sls:stage} Service Matcher lambda
    memorySize: 192
    timeout: 10
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_service_matcher_role_name}
    maximumRetryAttempts: 0
    environment:
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
      UPDATE_REQUEST_QUEUE_URL: ${env:update_request_queue_url}
      DB_NAME: ${env:DB_NAME}
      DB_PORT: ${env:DB_PORT}
      DB_READ_ONLY_USER_NAME: ${env:DB_READ_ONLY_USER_NAME}
      DB_REPLICA_SECRET_KEY: ${env:DB_REPLICA_SECRET_KEY}
      DB_REPLICA_SECRET_NAME: ${env:DB_REPLICA_SECRET_NAME}
      DB_REPLICA_SERVER: ${env:DB_REPLICA_SERVER}
      DB_SCHEMA: ${env:DB_SCHEMA}
    vpcDiscovery:
      vpcName: "${env:AWS_VPC_NAME}"
      subnets:
        - tagKey: Name
          tagValues:
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}a"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}b"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}c"
      securityGroups:
        - tagKey: Name
          tagValues:
            - "${env:TF_VAR_lambda_security_group_name}"

  service-sync:
    image: ${env:DOCKER_REGISTRY}/${env:SERVICE_SYNC}:${env:VERSION}
    architecture: x86_64
    name: ${env:SERVICE_SYNC_LAMBDA_NAME}
    description: ${sls:stage} Service Sync lambda
    memorySize: 512
    timeout: 20
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_service_sync_role_name}
    environment:
      CHANGE_EVENTS_TABLE_NAME: ${env:TF_VAR_change_events_table_name}
      CIRCUIT: DOS_DATABASE
      UPDATE_REQUEST_QUEUE_URL: ${env:update_request_queue_url}
      DB_NAME: ${env:DB_NAME}
      DB_PORT: ${env:DB_PORT}
      DB_READ_ONLY_USER_NAME: ${env:DB_READ_ONLY_USER_NAME}
      DB_REPLICA_SECRET_KEY: ${env:DB_REPLICA_SECRET_KEY}
      DB_REPLICA_SECRET_NAME: ${env:DB_REPLICA_SECRET_NAME}
      DB_REPLICA_SERVER: ${env:DB_REPLICA_SERVER}
      DB_SERVER: ${env:DB_SERVER}
      DB_SCHEMA: ${env:DB_SCHEMA}
      DB_SECRET_KEY: ${env:DB_SECRET_KEY}
      DB_SECRET_NAME: ${env:DB_SECRET_NAME}
      DB_READ_AND_WRITE_USER_NAME: ${env:DB_READ_AND_WRITE_USER_NAME}
      SEND_EMAIL_BUCKET_NAME: ${env:SEND_EMAIL_BUCKET_NAME}
      TEAM_EMAIL_ADDRESS: ${env:PROJECT_TEAM_EMAIL_ADDRESS}
      SYSTEM_EMAIL_ADDRESS: ${env:PROJECT_SYSTEM_EMAIL_ADDRESS}
      SEND_EMAIL_LAMBDA_NAME: ${env:TF_VAR_send_email_lambda_name}
    maximumRetryAttempts: 0
    vpcDiscovery:
      vpcName: "${env:AWS_VPC_NAME}"
      subnets:
        - tagKey: Name
          tagValues:
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}a"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}b"
            - "${env:AWS_VPC_NAME}-private-${env:AWS_REGION}c"
      securityGroups:
        - tagKey: Name
          tagValues:
            - "${env:TF_VAR_lambda_security_group_name}"

  slack-messenger:
    image: ${env:DOCKER_REGISTRY}/${env:SLACK_MESSENGER}:${env:VERSION}
    architecture: x86_64
    name: ${env:SLACK_MESSENGER_LAMBDA_NAME}
    description: ${sls:stage} Slack Messenger lambda
    memorySize: 128
    timeout: 10
    role: arn:aws:iam::${env:AWS_ACCOUNT_ID}:role/${env:TF_VAR_slack_messenger_role_name}
    environment:
      SLACK_ALERT_CHANNEL: ${env:SLACK_ALERT_CHANNEL}
      SLACK_WEBHOOK_URL: ${env:SLACK_WEBHOOK_URL}
    events:
      - sns:
          arn: arn:aws:sns:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:${env:TF_VAR_sns_topic_app_alerts_for_slack_default_region}
      - sns:
          arn: arn:aws:sns:${env:TF_VAR_route53_health_check_alarm_region}:${env:AWS_ACCOUNT_ID}:${env:TF_VAR_sns_topic_app_alerts_for_slack_route53_health_check_alarm_region}
