# For documentation see here - https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
version: 0.2

phases:
  install:
    commands:
      - wget https://github.com/cli/cli/releases/download/v2.6.0/gh_2.6.0_linux_amd64.rpm
      - yum localinstall -y gh_2.6.0_linux_amd64.rpm
  pre_build:
    commands:
      - printenv
      - export GH_TOKEN=$(make secret-fetch NAME=uec-dos-int-tools/deployment | jq -r '.GITHUB_TOKEN')
      - echo $GH_TOKEN
      - temp_role=$(aws sts assume-role --role-arn "arn:aws:iam::$AWS_ACCOUNT_ID_NONPROD:role/UECPUPipelineBuildRole" --role-session-name "CodeBuildSession")
      - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
      - aws sts get-caller-identity
      - make docker-hub-signin
      - make docker-pull NAME=serverless VERSION=latest
  build:
    commands:
      - chown -R 999:999 $CODEBUILD_SRC_DIR
      - echo $CODEBUILD_WEBHOOK_TRIGGER
      - export PR_NUMBER=$(echo $CODEBUILD_WEBHOOK_TRIGGER | grep -Eo '[0-9]*')
      - echo $PR_NUMBER
      - export ENVIRONMENT=$(make -s get-environment-from-pr PR_NUMBER=$PR_NUMBER | sed -e "s|\.|-|g")
      - echo $ENVIRONMENT
      - |
        if [[ "$ENVIRONMENT" =~ .*"release".* ]]; then
          export ENVIRONMENT=$(echo $ENVIRONMENT | sed -e "s|release/||")
          echo $ENVIRONMENT
          export TEST_ENV=$(echo $ENVIRONMENT-test)
          echo $TEST_ENV
          export ENVIRONMENT_DEPLOYED=$(make -s is-environment-deployed ENVIRONMENT=$TEST_ENV)
          echo $ENVIRONMENT_DEPLOYED
          if [ -n "$ENVIRONMENT_DEPLOYED" ]; then
            make undeploy PROFILE=test ENVIRONMENT=$TEST_ENV
            unset ENVIRONMENT_DEPLOYED
          fi
          export PERF_ENV=$(echo $ENVIRONMENT-perf)
          echo $PERF_ENV
          export ENVIRONMENT_DEPLOYED=$(make -s is-environment-deployed ENVIRONMENT=$PERF_ENV)
          echo $ENVIRONMENT_DEPLOYED
          if [ -n "$ENVIRONMENT_DEPLOYED" ]; then
            make undeploy PROFILE=perf ENVIRONMENT=$PERF_ENV
            unset ENVIRONMENT_DEPLOYED
          fi
        fi
      - |
        if [[ "$ENVIRONMENT" =~ .*"release".* ]]; then
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          temp_prod_role=$(aws sts assume-role --role-arn "arn:aws:iam::$AWS_ACCOUNT_ID_PROD:role/UECPUPipelineBuildRole" --role-session-name "CodeBuildSessionProd")
          export AWS_ACCESS_KEY_ID=$(echo $temp_prod_role | jq -r .Credentials.AccessKeyId)
          export AWS_SECRET_ACCESS_KEY=$(echo $temp_prod_role | jq -r .Credentials.SecretAccessKey)
          export AWS_SESSION_TOKEN=$(echo $temp_prod_role | jq -r .Credentials.SessionToken)
          export DEMO_ENV=$(echo $ENVIRONMENT-demo)
          echo $DEMO_ENV
          export ENVIRONMENT_DEPLOYED=$(make -s is-environment-deployed ENVIRONMENT=$DEMO_ENV)
          echo $ENVIRONMENT_DEPLOYED
          if [ -n "$ENVIRONMENT_DEPLOYED" ]; then
            make undeploy PROFILE=demo ENVIRONMENT=$DEMO_ENV
          fi
        fi
      - |
        if [[ "$ENVIRONMENT" =~ .*"release".* ]]; then
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          make terraform-destroy-auto-approve PROFILE=tools ENVIRONMENT=$ENVIRONMENT STACKS=release-pipeline,performance-pipeline
        fi
